import os
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import random
from datetime import datetime
from pytz import timezone

TOKEN = os.getenv("TOKEN") or "8030675619:AAH_h5GdxathZSlU9hZZ8ZQe1Um19Rnj9gE"

bot = telebot.TeleBot(TOKEN)


questions = {
    "–ª–µ–≥–∫–∏–π": [
        {
            "question": "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª–µ?",
            "options": ["5", "6", "7", "8"],
            "answer": "7",
            "hint": "–≠—Ç–æ —á–∏—Å–ª–æ –¥–Ω–µ–π –º–µ–∂–¥—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–æ–º –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ–º."
        },
        {
            "question": "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ—à–∏–≤–∞–Ω–∏–∏ —Å–∏–Ω–µ–≥–æ –∏ –∂—ë–ª—Ç–æ–≥–æ?",
            "options": ["–∑–µ–ª—ë–Ω—ã–π", "–∫—Ä–∞—Å–Ω—ã–π", "–æ—Ä–∞–Ω–∂–µ–≤—ã–π", "—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π"],
            "answer": "–∑–µ–ª—ë–Ω—ã–π",
            "hint": "–≠—Ç–æ —Ü–≤–µ—Ç —Ç—Ä–∞–≤—ã."
        },
        {
            "question": "–°–∫–æ–ª—å–∫–æ –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Ä—É–∫–µ —É —á–µ–ª–æ–≤–µ–∫–∞?",
            "options": ["4", "5", "6", "7"],
            "answer": "5",
            "hint": "–ù–∞ –∫–∞–∂–¥–æ–π —Ä—É–∫–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª—å—Ü–µ–≤."
        }
    ],
    "—Å—Ä–µ–¥–Ω–∏–π": [
        {
            "question": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–í–æ–π–Ω–∞ –∏ –º–∏—Ä'?",
            "options": ["–î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π", "–¢–æ–ª—Å—Ç–æ–π", "–ß–µ—Ö–æ–≤", "–ü—É—à–∫–∏–Ω"],
            "answer": "–¢–æ–ª—Å—Ç–æ–π",
            "hint": "–§–∞–º–∏–ª–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ '–¢'."
        }
    ],
    "—Å–ª–æ–∂–Ω—ã–π": [
        {
            "question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –Ω–µ—Ä–≤ –≤ —Ç–µ–ª–µ —á–µ–ª–æ–≤–µ–∫–∞?",
            "options": ["—Å–µ–¥–∞–ª–∏—â–Ω—ã–π", "–±–ª—É–∂–¥–∞—é—â–∏–π", "–ª–∏—Ü–µ–≤–æ–π", "—Å–ø–∏–Ω–Ω–æ–º–æ–∑–≥–æ–≤–æ–π"],
            "answer": "—Å–µ–¥–∞–ª–∏—â–Ω—ã–π",
            "hint": "–û–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ—Ç –ø–æ—è—Å–Ω–∏—Ü—ã –∫ –Ω–æ–≥–µ."
        }
    ]
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {
        "score": 0,
        "hints": 3,
        "call_used": False,
        "index": 0,
        "questions": []
    }

    all_qs = []
    for level in ["–ª–µ–≥–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "—Å–ª–æ–∂–Ω—ã–π"]:
        random.shuffle(questions[level])
        all_qs.extend(questions[level])
    random.shuffle(all_qs)
    user_data[chat_id]["questions"] = all_qs

    bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç! üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!")
    send_question(chat_id)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
def send_question(chat_id):
    data = user_data[chat_id]
    if data["index"] >= len(data["questions"]):
        bot.send_message(chat_id, f"üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—ã –Ω–∞–±—Ä–∞–ª–∏ {data['score']} –æ—á–∫–æ–≤.")
        return

    q = data["questions"][data["index"]]
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row(KeyboardButton(q["options"][0]), KeyboardButton(q["options"][1]))
    markup.row(KeyboardButton(q["options"][2]), KeyboardButton(q["options"][3]))
    markup.row(KeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞"), KeyboardButton("üìû –ó–≤–æ–Ω–æ–∫ –¥—Ä—É–≥—É"))

    bot.send_message(chat_id, q["question"], reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    data = user_data.get(chat_id)

    if not data:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        return

    text = message.text.strip()

    if text == "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞":
        use_hint(chat_id)
    elif text == "üìû –ó–≤–æ–Ω–æ–∫ –¥—Ä—É–≥—É":
        use_call(chat_id)
    else:
        check_answer(chat_id, text)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
def check_answer(chat_id, answer_text):
    data = user_data[chat_id]
    current_q = data["questions"][data["index"]]

    if answer_text.lower() == current_q["answer"].lower():
        data["score"] += 10
        bot.send_message(chat_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        bot.send_message(chat_id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_q['answer']}")

    data["index"] += 1
    send_question(chat_id)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
def use_hint(chat_id):
    data = user_data[chat_id]
    if data["hints"] > 0:
        q = data["questions"][data["index"]]
        data["hints"] -= 1
        bot.send_message(chat_id, f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {q['hint']} (–û—Å—Ç–∞–ª–æ—Å—å: {data['hints']})")
    else:
        bot.send_message(chat_id, "‚ùó –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∏.")

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞ –¥—Ä—É–≥—É
def use_call(chat_id):
    data = user_data[chat_id]
    if data["call_used"]:
        bot.send_message(chat_id, "üìµ –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∑–≤–æ–Ω–æ–∫ –¥—Ä—É–≥—É.")
        return

    data["call_used"] = True
    q = data["questions"][data["index"]]
    correct = q["answer"]
    options = q["options"]

    # 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if random.random() < 0.7:
        guess = correct
        confidence = "—É–≤–µ—Ä–µ–Ω"
    else:
        guess = random.choice([o for o in options if o != correct])
        confidence = "–Ω–µ —É–≤–µ—Ä–µ–Ω, –Ω–æ –¥—É–º–∞—é"

    bot.send_message(chat_id, f"üìû –î—Ä—É–≥ –≥–æ–≤–æ—Ä–∏—Ç: –Ø {confidence}, —á—Ç–æ —ç—Ç–æ ‚Äî {guess}.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    tz = timezone("Europe/Moscow")
    print(f"[{datetime.now(tz)}] ‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)
